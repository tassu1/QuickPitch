"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import jsPDF from "jspdf";

// Icons for different slide types
const slideIcons = {
  problem: "🚨",
  solution: "💡",
  market: "📊",
  product: "🛠️",
  team: "👥",
  traction: "📈",
  competition: "⚔️",
  business: "💰",
  investment: "💎",
  default: "📝"
};

export default function GeneratePage() {
  const [idea, setIdea] = useState("");
  const [pitch, setPitch] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState("");
  const [currentPage, setCurrentPage] = useState(0);
  const [isSaving, setIsSaving] = useState(false);
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/api/auth/signin");
    }
  }, [status, router]);

  if (status === "loading") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-amber-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
      </div>
    );
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!idea.trim()) {
      setError("Please enter your idea");
      return;
    }

    setIsGenerating(true);
    setError("");
    setCurrentPage(0);
    
    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idea: idea.trim() }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error || "Failed to generate pitch");
      setPitch(data.pitch);
    } catch (err: any) {
      setError(err.message || "Something went wrong");
    } finally {
      setIsGenerating(false);
    }
  };

  const pages = pitch ? pitch.split('\n\n').filter(page => page.trim()) : [];

  const nextPage = () => setCurrentPage(prev => Math.min(prev + 1, pages.length - 1));
  const prevPage = () => setCurrentPage(prev => Math.max(prev - 1, 0));

  const getSlideType = (pageContent: string) => {
    const firstLine = pageContent.split(':')[0].toLowerCase();
    if (firstLine.includes('problem')) return 'problem';
    if (firstLine.includes('solution')) return 'solution';
    if (firstLine.includes('market')) return 'market';
    if (firstLine.includes('product')) return 'product';
    if (firstLine.includes('team')) return 'team';
    if (firstLine.includes('traction')) return 'traction';
    if (firstLine.includes('competition')) return 'competition';
    if (firstLine.includes('business')) return 'business';
    if (firstLine.includes('investment') || firstLine.includes('ask')) return 'investment';
    return 'default';
  };

  const downloadPDF = () => {
    // Create new PDF with A4 dimensions (210mm x 297mm)
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4"
    });
    
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    
    // Add title page with professional design
    doc.setFillColor(255, 255, 255);
    doc.rect(0, 0, pageWidth, pageHeight, 'F');
    
    // Add decorative header
    doc.setFillColor(251, 191, 36);
    doc.rect(0, 0, pageWidth, 80, 'F');
    
    // Title
    doc.setFontSize(28);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(120, 53, 15);
    doc.text(idea, pageWidth / 2, margin + 40, { align: 'center' });
    
    // Subtitle
    doc.setFontSize(16);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(180, 83, 9);
    doc.text("Investor Pitch Deck", pageWidth / 2, margin + 55, { align: 'center' });
    
    // Footer on title page
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text("Generated by QuickPitch", pageWidth / 2, pageHeight - 15, { align: 'center' });
    
    // Add each slide as a page
    pages.forEach((page, index) => {
      if (index > 0) doc.addPage();
      
      const slideType = getSlideType(page);
      const title = page.split(":")[0];
      const content = page.replace(/^[^:]+:/, "").trim();
      
      // White background for content
      doc.setFillColor(255, 255, 255);
      doc.rect(0, 0, pageWidth, pageHeight, 'F');
      
      // Header with color
      doc.setFillColor(253, 230, 198);
      doc.rect(0, 0, pageWidth, 25, 'F');
      
      // Slide title with icon
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(120, 53, 15);
      doc.text(`${slideIcons[slideType] || slideIcons.default} ${title}`, margin, 17);
      
      // Page number
      doc.setFontSize(10);
      doc.setTextColor(180, 83, 9);
      doc.text(`Page ${index + 1} of ${pages.length}`, pageWidth - margin, 17, { align: 'right' });
      
      // Content
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(50, 50, 50);
      
      // Split text into lines that fit the page width
      const splitText = doc.splitTextToSize(content, contentWidth);
      
      // Calculate text height and position
      const textHeight = doc.getTextDimensions(splitText).h;
      const startY = 40;
      
      // Add content with proper line spacing
      doc.text(splitText, margin, startY, {
        maxWidth: contentWidth,
        lineHeightFactor: 1.5
      });
      
      // Add footer separator
      doc.setDrawColor(251, 191, 36);
      doc.line(margin, pageHeight - 20, pageWidth - margin, pageHeight - 20);
      
      // Add footer text
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(idea, margin, pageHeight - 15);
      doc.text("Confidential", pageWidth - margin, pageHeight - 15, { align: 'right' });
    });
    
    // Save the PDF
    doc.save(`${idea.replace(/\s+/g, '-')}-pitch-deck.pdf`);
  };

  const savePitch = async () => {
    if (!session || !pitch) return;
    
    setIsSaving(true);
    try {
      const response = await fetch("/api/pitches", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          title: idea,
          content: pitch,
          userId: session.user.id 
        }),
      });

      if (!response.ok) throw new Error("Failed to save pitch");
      
      // Redirect to dashboard after successful save
      router.push("/dashboard");
    } catch (err: any) {
      setError(err.message || "Something went wrong");
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-amber-100 p-6">
      <div className="max-w-6xl mx-auto">
        <header className="mb-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-amber-600 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              <h1 className="text-2xl font-bold text-amber-900">QuickPitch</h1>
            </div>
            <button onClick={() => router.push("/dashboard")} className="text-amber-700 hover:text-amber-800 text-sm underline">
              Back to Dashboard
            </button>
          </div>
        </header>

        <main>
          <div className="text-center mb-8">
            <h2 className="text-4xl font-bold text-amber-900 mb-4">Generate Investor Pitch Deck</h2>
            <p className="text-lg text-amber-700">Create professional VC-ready pitch decks in seconds</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-amber-100">
              <h3 className="text-2xl font-semibold text-amber-900 mb-6">Your Startup Idea</h3>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label htmlFor="idea" className="block text-sm font-medium text-amber-700 mb-2">
                    Describe your startup idea
                  </label>
                  <textarea
                    id="idea"
                    value={idea}
                    onChange={(e) => setIdea(e.target.value)}
                    placeholder="e.g., An AI-powered platform for remote team collaboration..."
                    className="w-full h-32 p-4 border border-amber-200 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 resize-none"
                    disabled={isGenerating}
                  />
                </div>

                {error && (
                  <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-700 text-sm">{error}</p>
                  </div>
                )}

                <button
                  type="submit"
                  disabled={isGenerating}
                  className="w-full bg-amber-600 text-white py-3 rounded-lg font-medium hover:bg-amber-700 transition-all duration-300 shadow-lg hover:shadow-amber-500/30 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isGenerating ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating Pitch Deck...
                    </>
                  ) : (
                    "Generate Pitch Deck"
                  )}
                </button>
              </form>
            </div>

            <div className="bg-white rounded-2xl p-6 shadow-lg border border-amber-100">
              <h3 className="text-2xl font-semibold text-amber-900 mb-6">Pitch Deck</h3>
              
              {pitch ? (
                <div className="space-y-6">
                  <div className="relative">
                    <AnimatePresence mode="wait">
                      <motion.div
                        key={currentPage}
                        initial={{ opacity: 0, x: 50 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -50 }}
                        transition={{ duration: 0.3 }}
                        className="bg-white rounded-2xl shadow-lg p-8 border border-amber-100 min-h-[400px] flex flex-col"
                      >
                        {pages[currentPage] && (
                          <>
                            <div className="flex items-center mb-4">
                              <span className="text-2xl mr-3">
                                {slideIcons[getSlideType(pages[currentPage])]}
                              </span>
                              <h2 className="text-2xl font-bold text-amber-900">
                                {pages[currentPage].split(":")[0]}
                              </h2>
                            </div>
                            <div className="prose prose-amber max-w-none flex-grow">
                              <p className="text-amber-700 whitespace-pre-line">
                                {pages[currentPage].replace(/^[^:]+:/, "").trim()}
                              </p>
                            </div>
                          </>
                        )}
                      </motion.div>
                    </AnimatePresence>

                    {/* Dots pagination */}
                    <div className="flex justify-center mt-4 space-x-2">
                      {pages.map((_, index) => (
                        <button
                          key={index}
                          onClick={() => setCurrentPage(index)}
                          className={`w-3 h-3 rounded-full ${
                            currentPage === index ? "bg-amber-600" : "bg-amber-200"
                          }`}
                          aria-label={`Go to slide ${index + 1}`}
                        />
                      ))}
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <button
                      onClick={prevPage}
                      disabled={currentPage === 0}
                      className="px-4 py-2 bg-amber-100 text-amber-700 rounded-lg disabled:opacity-50 flex items-center"
                    >
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                      </svg>
                      Previous
                    </button>
                    
                    <span className="text-amber-600 text-sm">
                      Page {currentPage + 1} of {pages.length}
                    </span>
                    
                    <button
                      onClick={nextPage}
                      disabled={currentPage === pages.length - 1}
                      className="px-4 py-2 bg-amber-100 text-amber-700 rounded-lg disabled:opacity-50 flex items-center"
                    >
                      Next
                      <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </button>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <button
                      onClick={downloadPDF}
                      className="bg-amber-600 text-white py-2 rounded-lg font-medium hover:bg-amber-700 transition-colors flex items-center justify-center"
                    >
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                      </svg>
                      Download PDF
                    </button>
                    <button
                      onClick={savePitch}
                      disabled={isSaving}
                      className="border border-amber-300 text-amber-700 py-2 rounded-lg font-medium hover:bg-amber-50 transition-colors flex items-center justify-center disabled:opacity-50"
                    >
                      {isSaving ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-amber-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Saving...
                        </>
                      ) : (
                        <>
                          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
                          </svg>
                          Save to Dashboard
                        </>
                      )}
                    </button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-16">
                  <div className="w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                  </div>
                  <p className="text-amber-600">Your professional pitch deck will appear here</p>
                  <p className="text-sm text-amber-500 mt-2">Enter your idea to generate a complete VC-ready deck</p>
                </div>
              )}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}